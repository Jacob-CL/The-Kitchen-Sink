Check for specific types of XSS
- Identify inputs, send XSS payloads, compare response

Check for input sanitization
- Identify input, inject string like (),./';[]\? and compare response

Check for direct input, output HTML encoding, XSS prevention headers
- https://academy.hackthebox.com/module/103/section/1009

Check for 
- https://academy.hackthebox.com/module/103/section/1009

ASP.net has built-in XSS protection

########### Direct Input
Finally, we should always ensure that we never use user input directly within certain HTML tags, like:

- JavaScript code <script></script>
- CSS Style Code <style></style>
- Tag/Attribute Fields <div name='INPUT'></div>
- HTML Comments <!-- -->

If user input goes into any of the above examples, it can inject malicious JavaScript code, which may lead to an XSS vulnerability. In addition to this, we should avoid using JavaScript functions that allow changing raw text of HTML fields, like:

- DOM.innerHTML
- DOM.outerHTML
- document.write()
- document.writeln()
- document.domain

And the following jQuery functions:

- html()
- parseHTML()
- add()
- append()
- prepend()
- after()
- insertAfter()
- before()
- insertBefore()
- replaceAll()
- replaceWith()

As these functions write raw text to the HTML code, if any user input goes into them, it may include malicious JavaScript code, which leads to an XSS vulnerability.